<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>framework</artifactId>
        <groupId>com.github.chenhao96</groupId>
        <version>1.1.8-RELEASE</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <packaging>jar</packaging>
    <version>1.1.8-RELEASE</version>
    <artifactId>framework-commons</artifactId>

    <properties>
        <jedis.version>3.0.1</jedis.version>
        <mybatis.version>3.5.0</mybatis.version>
        <logback.version>1.2.3</logback.version>
        <pinyin4j.version>2.5.0</pinyin4j.version>
        <org.slf4j.version>1.7.9</org.slf4j.version>
        <commons-lang.version>2.6</commons-lang.version>
        <commons-codec.version>1.12</commons-codec.version>
        <com.fasterxml.version>2.9.8</com.fasterxml.version>
        <mybatis-spring.version>1.3.2</mybatis-spring.version>
        <spring-redis.version>2.1.6.RELEASE</spring-redis.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>${spring-redis.version}</version>
        </dependency>

        <!--log记录-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${org.slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${org.slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${com.fasterxml.version}</version>
        </dependency>

        <!-- redis -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>${jedis.version}</version>
        </dependency>

        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons-lang.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>

        <dependency>
            <groupId>com.belerweb</groupId>
            <artifactId>pinyin4j</artifactId>
            <version>${pinyin4j.version}</version>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <source>src/main/java</source>
                            </sourceDirs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--&lt;!&ndash; ProGuard混淆插件&ndash;&gt;-->
            <!--<plugin>-->
                <!--<groupId>com.github.wvengen</groupId>-->
                <!--<artifactId>proguard-maven-plugin</artifactId>-->
                <!--<version>2.0.11</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<phase>package</phase>-->
                        <!--<goals><goal>proguard</goal></goals>-->
                    <!--</execution>-->
                <!--</executions>-->
                <!--<configuration>-->
                    <!--&lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;-->
                    <!--<attach>true</attach>-->
                    <!--&lt;!&ndash; 是否混淆&ndash;&gt;-->
                    <!--<obfuscate>true</obfuscate>-->
                    <!--&lt;!&ndash; 指定生成文件分类 &ndash;&gt;-->
                    <!--<attachArtifactClassifier>pg</attachArtifactClassifier>-->
                    <!--<options>-->
                        <!--&lt;!&ndash; JDK目标版本1.8&ndash;&gt;-->
                        <!--<option>-target ${java.version}</option>-->
                        <!--&lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
                        <!--<option>-dontshrink</option>-->
                        <!--&lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;-->
                        <!--<option>-dontoptimize</option>-->
                        <!--&lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;-->
                        <!--<option>-dontskipnonpubliclibraryclasses</option>-->
                        <!--<option>-dontskipnonpubliclibraryclassmembers</option>-->
                        <!--&lt;!&ndash;不用大小写混合类名机制&ndash;&gt;-->
                        <!--<option>-dontusemixedcaseclassnames</option>-->

                        <!--&lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;-->
                        <!--<option>-allowaccessmodification</option>-->
                        <!--&lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆&ndash;&gt;-->
                        <!--<option>-useuniqueclassmembernames</option>-->
                        <!--&lt;!&ndash; 不混淆所有包名&ndash;&gt;-->
                        <!--&lt;!&ndash;<option>-keeppackagenames</option>&ndash;&gt;-->

                        <!--&lt;!&ndash; 需要保持的属性：异常，注解等&ndash;&gt;-->
                        <!--<option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>-->
                        <!--&lt;!&ndash; 不混淆所有的set/get方法&ndash;&gt;-->
                        <!--&lt;!&ndash;<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>&ndash;&gt;-->

                        <!--&lt;!&ndash; 不混淆包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
                        <!--&lt;!&ndash;<option>-keep class org.steven.chen.** { <methods>; }</option>&ndash;&gt;-->

                    <!--</options>-->
                    <!--&lt;!&ndash;class 混淆后输出的jar包&ndash;&gt;-->
                    <!--<outjar>classes-autotest.jar</outjar>-->
                    <!--&lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;-->
                    <!--<libs>-->
                        <!--<lib>${java.home}/lib/rt.jar</lib>-->
                    <!--</libs>-->
                    <!--&lt;!&ndash; 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;-->
                    <!--<injar>classes</injar>-->
                    <!--&lt;!&ndash; 输出目录&ndash;&gt;-->
                    <!--<outputDirectory>${project.build.directory}</outputDirectory>-->
                <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>
</project>